// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BitalihAccount {
  id                    String   @id @default(cuid())
  account_name          String   @unique
  ssn                   String
  password              String
  created_at            DateTime @default(now())
  last_used             DateTime?
  total_coupons_played  Int      @default(0)
  successful_coupons    Int      @default(0)
  total_bet_amount      Float    @default(0)
  total_win_amount      Float    @default(0)
  commission_enabled    Boolean  @default(false)
  daily_commission      Float    @default(0)
  notes                 String?
  
  coupon_history        BitalihCouponHistory[]
}

model BitalihCouponHistory {
  id                    String   @id @default(cuid())
  account_name          String
  timestamp             DateTime @default(now())
  race_data             String   // JSON string
  bet_amount            Float
  odds                  Float
  potential_win         Float
  profit                Float
  success               Boolean
  result_message        String
  
  account               BitalihAccount @relation(fields: [account_name], references: [account_name], onDelete: Cascade)
}
